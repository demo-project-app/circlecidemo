# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
    
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      
      - setup_remote_docker:
          version: 18.05.0-ce
          docker_layer_caching: true
          
      - run: mvn package
      
      - store_artifacts:
          path: target/circlecidemo-0.0.1-SNAPSHOT.jar
            
      - run:
          name: Install aws cli
          command: |
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
              
      - deploy:
          name: Push application Docker image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              
              #Variables
              CLUSTER='cicd-app'
              FAMILY='cicd-app'
              DOCKER_IMAGE='test-app'
              TASK='cicd-app'
              SERVICE='cicd-service'
              
              #Aws Login
              aws configure set region ${AWS_REGION}
              login="$(aws ecr get-login --no-include-email)"
              ${login}
              docker build  -t cicd/circlecidemo .
              docker tag cicd/circlecidemo:latest ${ACC_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/cicd-app:$CIRCLE_SHA1
              docker push ${ACC_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/cicd-app:$CIRCLE_SHA1
              
              # Create a task for deployement
              task_template='[
                {
                  "name": "%s",
                  "image": "%s.dkr.ecr.%s.amazonaws.com/%s:%s",
                  "essential": true,
                  "memoryReservation": 1000,
                  "portMappings": [
                    {
                      "containerPort": 8080,
                      "hostPort": 8080
                    }
                  ]
                }
              ]'
              
              echo "$task_template"
              task_def=$(printf "$task_template" $TASK $ACC_ID $AWS_REGION $TASK $CIRCLE_SHA1)
              
               # Stop the old task
              if task_id=$(aws ecs list-tasks --cluster $CLUSTER --desired-status RUNNING --family $FAMILY | egrep "task" | tr "/" " " | tr "[" " " |  awk '{print $2}' | sed 's/"$//'); then
                  if [ task_id != ']' ]; then
                    echo "STOPPING TASK : $task_id"
                    aws ecs stop-task --cluster $CLUSTER --task $task_id
                  fi
              fi
              
              
              # Register the task definition
              if json=$(aws ecs register-task-definition --container-definitions "$task_def" --family "$FAMILY"); then
                  echo "Task Registration: $json"
              else
                  echo "Failed to register task definition"
                  return 1
              fi
              
              # Grab revision # using regular bash and grep
              revision=$(echo "$json" | grep -o '"revision": [0-9]*' | grep -Eo '[0-9]+')
              echo "Revision: $revision"
              
              # Deploy revision
              if service=$(aws ecs update-service --cluster "$CLUSTER" --service "$SERVICE" --task-definition "$TASK":"$revision"); then
                echo  echo "Service Updated: $service"
              else
                 echo "Error updating service."
                 return 1
              fi
            fi
              
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
        
      # run tests!
      - run: mvn integration-test
